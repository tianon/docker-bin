#!/usr/bin/env bash
set -Eeuo pipefail

uid="$(id -u)"
gid="$(id -g)"
hostname="$(hostname --short)"

self="$(basename "$0")"
self="${self%-docker}"

home="$HOME/homes/$self"
args=(
	--rm
	--security-opt no-new-privileges
)
image="tianon/$self"

declare -A features=(
	['X']=1
	['audio']=1
)
_feature() { test -n "${features[$1]:-}"; }

case "$self" in
	steam)
		features['GL']=1
		features['dbus']=1
		features['controllers']=1
		args+=(
			# https://gitlab.steamos.cloud/steamrt/steam-runtime-tools#pressure-vessel-putting-steam-in-containers
			# https://archive.fosdem.org/2020/schedule/event/containers_steam/
			# https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/issues/35
			--security-opt seccomp=unconfined
			--security-opt apparmor=unconfined
		)
		;;

	lutris)
		features['GL']=1
		features['controllers']=1
		args+=(
			# Lutris uses $USER for Wine home directory detection
			--env USER="$uid"
			# https://github.com/lutris/lutris/blob/4315ba26f55dc208105b8abebf49d9ec28a67a1b/lutris/util/wine/prefix.py#L97

			# TODO figure out why Wine requires this, and give it a more specific profile instead
			--security-opt seccomp=unconfined
		)
		;;

	zoom)
		features['GL']=1
		features['video']=1
		if command -v pacmd > /dev/null && pacmd list-sinks | grep -q FLAT_VOLUME; then
			{
				echo
				echo 'WARNING: it looks like you have FLAT_VOLUME enabled on at least one sink'
				echo
				echo '  Zoom is naughty, and will wreak havoc on that!'
				echo
				echo '  - https://www.eigenmagic.com/2018/04/16/fixed-zoom-resets-pulseaudio-volume-to-max-with-flat-volumes/'
				echo '  - https://200ok.ch/posts/2019-05-20_disable_flatvolume_for_pulseaudio.html'
				echo
				echo '  $ echo flat-volumes = no >> ~/.config/pulse/daemon.conf'
				echo '  $ pulseaudio --kill'
				echo
			} >&2
			sleep 5
		fi
		;;

	microsoft-edge*)
		features['GL']=1
		features['video']=1
		features['dbus']=1 # desktop notifications, I think?
		image="${image//edge-/edge:}"
		home="${home//edge-*/edge}" # use one $HOME for all Edge
		args+=(
			# TODO figure out whether we can use more minimal privileges here
			--cap-add SYS_ADMIN
			--security-opt no-new-privileges=false

			# TODO figure out if this is generally desirable for all Edge (needed for Cast, useful for connecting to other things)
			--network host
		)
		;;

	slack)
		#features['GL']=1
		args+=(
			# TODO figure out how to get over this properly instead D: (probably similar to what Edge needs)
			--cap-add SYS_ADMIN
			--security-opt no-new-privileges=false
		)
		;;

	*)
		echo >&2 "error: unknown Docker image: $self"
		exit 1
		;;
esac

args+=(
	--name "$self"
	--init --rm
	--hostname "$hostname-docker"
)

mkdir -p "$home"
home="$(cd "$home" && pwd -P)"

# for some reason, chromium-based apps can't handle reading /etc/localtime (or even /etc/timezone) correctly :/
# (likely related to it normally being a symlink to "Etc/UTC" and Docker following the symlink when mounting from the host)
if [ -n "${TZ:-}" ]; then
	args+=( --env TZ )
elif [ -s /etc/timezone ]; then
	timezone="$(< /etc/timezone)"
	args+=( --env TZ="$timezone" )
fi

args+=(
	--user "$uid:$gid"

	--mount type=bind,src="$home",dst="/$self-home"
	--env HOME="/$self-home"
	--workdir "/$self-home"

	--mount type=bind,src=/etc/localtime,dst=/etc/localtime,ro
	--mount type=bind,src=/etc/machine-id,dst=/etc/machine-id,ro
)
for addGid in $(id -G); do
	if [ "$addGid" != "$gid" ]; then
		args+=( --group-add "$addGid" )
	fi
done

if _feature 'X'; then
	args+=(
		--mount type=bind,src=/tmp/.X11-unix,dst=/tmp/.X11-unix,ro
		--env DISPLAY
		--ipc host # DevShm errors
	)
fi
if _feature 'dbus'; then
	# TODO one or the other half of this is definitely necessary for desktop notifications (and Chrome/Edge likes to have it), but it seems like a lot of privilege and needs more research
	if [ -d /var/run/dbus ]; then
		args+=( --mount type=bind,src=/var/run/dbus,dst=/var/run/dbus,ro )
	fi
	case "${DBUS_SESSION_BUS_ADDRESS:-}" in
		unix:path=/*)
			args+=(
				--env DBUS_SESSION_BUS_ADDRESS='unix:path=/run/dbus-bus'
				--mount type=bind,src="${DBUS_SESSION_BUS_ADDRESS#unix:path=}",dst='/run/dbus-bus',ro
			)
			;;
	esac
fi

if _feature 'GL'; then
	args+=( --device /dev/dri )

	# NVIDIA...
	if nvidiaVersion="$(nvidiize --detect)"; then
		newImage="$(nvidiize --version "$nvidiaVersion" --image "$image")"
		nvidiize --version "$nvidiaVersion" --tag "$newImage" "$image"
		image="$newImage"

		for device in /dev/nvidia*; do
			if [ -e "$device" ]; then
				args+=( --device "$device" )
			fi
		done
	fi
fi

if _feature 'controllers'; then
	if [ -d /dev/input ]; then
		args+=( --mount type=bind,src=/dev/input,dst=/dev/input,ro )

		majors="$(find /dev/input -type c -exec stat --format='%t' '{}' + | sort -u)"
		for major in $majors; do
			majorDec="$(( 16#$major ))"
			args+=( --device-cgroup-rule "c $majorDec:* rmw" )
		done
	fi
	if [ -e /dev/uinput ]; then
		args+=( --device /dev/uinput )
	fi
	if [ -d /run/udev ]; then
		args+=( --mount type=bind,src=/run/udev,dst=/run/udev,ro )
	fi
	for device in /dev/hidraw*; do
		[ -c "$device" ] || continue
		args+=( --device "$device" )
	done
fi
if _feature 'video'; then
	for device in /dev/video[0-9]*; do
		if [ -c "$device" ]; then
			args+=( --device "$device" )
		fi
	done
fi

if _feature 'audio' && [ -d "${XDG_RUNTIME_DIR:-}" ] && [ -S "$XDG_RUNTIME_DIR/pulse/native" ]; then
	args+=(
		--mount type=bind,src="$XDG_RUNTIME_DIR/pulse",dst=/pulse,ro
		--env PULSE_SERVER='unix:/pulse/native'
	)
fi

args+=( --interactive )
if [ -t 0 ] && [ -t 1 ]; then
	args+=( --tty )
fi

# TODO this environment variable is steam-specific, but maybe the functionality/privileges are generally useful?
case "${DEBUGGER:-}" in
	'') ;;
	strace | gdb)
		case "$image" in
			*:*) newImage="$image-debug-$DEBUGGER" ;;
			*)   newImage="$image:debug-$DEBUGGER" ;;
		esac
		docker build --tag "$newImage" - <<-EODF
			FROM $image
			RUN set -eux; \
				apt-get update; \
				apt-get install -y --no-install-recommends $DEBUGGER; \
				rm -rf /var/lib/apt/lists/*
		EODF
		image="$newImage"
		args+=(
			--env DEBUGGER
			--cap-add SYS_PTRACE
			--security-opt seccomp=unconfined
			--security-opt apparmor=unconfined
		)
		;;
esac

set -x
exec docker run "${args[@]}" "$image" "$@"
