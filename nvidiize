#!/usr/bin/env bash
set -Eeuo pipefail

# takes a Docker image and adds NVIDIA drivers to it (hopefully)

usage() {
	cat <<-'EOU'

		   nvidiaVersion="$(nvidiize --detect)"
		   nvidiize --version "$nvidiaVersion" --cache --pull
		   docker pull tianon/steam
		   image="$(nvidiize --version "$nvidiaVersion" --image tianon/steam)"
		   nvidiize --version "$nvidiaVersion" --tag "$image" tianon/steam
		   docker run ... "$image"

	EOU
}

_detect() {
	local temp

	# if we have $DISPLAY and glxinfo, we should prefer that (since we might be on a PRIME system and not using nVidia right now)
	if [ -n "${DISPLAY:-}" ] && command -v glxinfo > /dev/null; then
		if temp="$(glxinfo -B 2>/dev/null)" && grep -qF 'OpenGL vendor string: NVIDIA Corporation' <<<"$temp"; then
			temp="$(sed -rne '/^OpenGL version string:.*NVIDIA ([0-9]{3,}([.][0-9]+)+).*/s//\1/p' <<<"$temp")"
			if [ -n "$temp" ]; then
				echo "$temp"
				return 0
			fi
		fi
		echo >&2 'error: failed to determine NVIDIA driver version (via "glxinfo")'
		return 1
	fi

	# if DISPLAY isn't set (or glxinfo is missing), let's fall back to the version of the kernel module loaded (which is more accurate/reliable anyhow :D)
	if temp="$(export PATH="/sbin:/usr/sbin:/usr/local/sbin:$PATH"; modinfo --field=version nvidia-current 2>/dev/null)" && [ -n "$temp" ]; then
		echo "$temp"
		return 0
	fi
	echo >&2 'error: failed to determine NVIDIA driver version (via "modinfo" *or* "glxinfo")'
	return 1
}

opts="$(getopt --options '' --longoptions 'cache,detect,dockerfile,help,image,pull,tag:,version:' -- "$@")"
eval "set -- $opts"

doCache=
doImage=
dockerBuild=( docker build - )
nvidiaVersion=
imageTag=
while true; do
	flag="$1"; shift
	case "$flag" in
		--cache) doCache=1 ;;
		--detect) nvidiaVersion="$(_detect)"; if [ -n "$nvidiaVersion" ]; then echo "$nvidiaVersion"; exit; else exit 1; fi ;;
		--dockerfile) dockerBuild=( cat ) ;;
		--help) usage; exit ;;
		--image) doImage=1 ;;
		--pull) dockerBuild+=( --pull ) ;;
		--tag) imageTag="$1"; shift ;;
		--version) nvidiaVersion="$1"; shift ;;
		--) break ;;
		*)
			echo >&2 "error: unknown flag: '$flag'"
			usage >&2
			exit 1
			;;
	esac
done

if [ -n "$doCache" ]; then
	from='cache-placeholder'
	user=
else
	from="$1"; shift
	user="$(docker image inspect --format '{{ .Config.User }}' "$from")"
fi

if [ -z "$nvidiaVersion" ]; then
	nvidiaVersion="$(_detect)"
fi

if [ -z "$nvidiaVersion" ]; then
	echo >&2
	echo >&2 "error: missing NVIDIA version"
	echo >&2
	echo >&2 "  does this system have an NVIDIA card/installed drivers?"
	echo >&2
	echo >&2 "  if using PRIME offload, you probably want to:"
	echo >&2 "    export __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia"
	echo >&2 "  https://http.download.nvidia.com/XFree86/Linux-x86_64/450.80.02/README/primerenderoffload.html"
	echo >&2
	echo >&2 "  use '--version XXX.YY' to override"
	echo >&2
	exit 1
fi

if [ -n "$imageTag" ]; then
	image="$imageTag"
else
	suffix="nvidia-$nvidiaVersion"
	case "$from" in
		*:*) image="$from-$suffix" ;;
		*)   image="$from:$suffix" ;;
	esac
	if [ -n "$doCache" ]; then
		image="tianon/${suffix/-/:}" # tianon/nvidia:XXX.YY
	fi
fi
if [ -n "$doImage" ]; then
	echo "$image"
	exit
fi

if [ "${dockerBuild[0]}" = 'docker' ]; then
	dockerBuild+=( --tag "$image" )
	if [ -n "$doCache" ]; then
		dockerBuild+=( --target=nvidia )
	fi
fi

{
	cat <<'EOF'
FROM debian:trixie-slim AS nvidia

RUN set -eux; \
	apt-get install --update -y --no-install-recommends \
		ca-certificates \
		wget \
	; \
	apt-get dist-clean

# https://http.download.nvidia.com/XFree86/Linux-x86_64/
# https://http.download.nvidia.com/XFree86/Linux-x86_64/latest.txt
EOF
	url="http://us.download.nvidia.com/XFree86/Linux-x86_64/$nvidiaVersion/NVIDIA-Linux-x86_64-$nvidiaVersion.run"
	sha256="$(wget -qO- "$url.sha256sum")"
	sha256="${sha256%% *}"
	cat <<EOF
ENV NVIDIA_VERSION $nvidiaVersion
ENV NVIDIA_URL $url
ENV NVIDIA_SHA256 $sha256
EOF
	cat <<'EOF'

RUN set -eux; \
	wget -O /tmp/nvidia.run "$NVIDIA_URL" --progress=dot:giga; \
	echo "$NVIDIA_SHA256 */tmp/nvidia.run" | sha256sum --strict --check -; \
	chmod +x /tmp/nvidia.run; \
	/tmp/nvidia.run --check

EOF
	echo "FROM $from"
	cat <<'EOF'

USER root
COPY --from=nvidia /tmp/nvidia.run /tmp/nvidia.run
RUN set -eux; \
	/tmp/nvidia.run --advanced-options; \
	/bin/true; \
	mkdir /tmp/nvidia; \
	for b in modprobe rmmod lsmod depmod; do \
		ln -sv /bin/true "/tmp/nvidia/$b"; \
	done; \
	export PATH="/tmp/nvidia:$PATH"; \
	/tmp/nvidia.run \
		--ui=none \
		--no-questions \
		\
		--no-backup \
		--no-check-for-alternate-installs \
		--no-kernel-module \
		--no-kernel-module-source \
		--no-nouveau-check \
		--no-nvidia-modprobe \
		--no-rpms \
		\
# needed for 390.138
		--install-libglvnd \
	; \
	rm -rf /tmp/nvidia
# https://http.download.nvidia.com/XFree86/Linux-x86_64/450.80.02/README/installedcomponents.html
EOF

	if [ -n "$user" ]; then
		echo "USER $user"
	fi
} | "${dockerBuild[@]}"
